import 'dart:async';

import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:competition/shared/network/remote/dio_helper.dart';
import 'package:flutter_bloc/flutter_bloc.dart';

import '../../../const/const.dart';
import '../../../models/message_model.dart';
import '../../../models/response_model.dart';
import '../../../models/user_model.dart';
import 'chat_states.dart';

class ChatCubit extends Cubit<ChatStates> {
  ChatCubit() : super(ChatIntialState());

  static ChatCubit get(context) => BlocProvider.of(context);

  String? message;

  Future<void> userSendMessage(String message, String serviceId) async {
    MessageModel messageModel = MessageModel(
      dateTime: DateTime.now().toString(),
      message: message,
      senderId: uId,
      serviceId: serviceId,
      isSeen: false,
    );
    print(uId);
    FirebaseFirestore.instance
        .collection('users')
        .doc(uId)
        .collection('chats')
        .doc(serviceId)
        .set({'exist': true}).then((value) {
      FirebaseFirestore.instance
          .collection('users')
          .doc(uId)
          .collection('chats')
          .doc(serviceId)
          .collection('messages')
          .add(messageModel.toMap())
          .then((value) {
        message = message;
        emit(ChatUserSendMessageSuccessState());
      }).catchError((error) {
        print(error.toString());
        emit(SocialSendMessageErrorState());
      });
    });
  }

  Future<void> botSendMessage(String message, String serviceId) async {
    MessageModel messageModel = MessageModel(
      dateTime: DateTime.now().toString(),
      message: message,
      senderId: serviceId,
      serviceId: serviceId,
      isSeen: false,
    );
    print(uId);
    FirebaseFirestore.instance
        .collection('users')
        .doc(uId)
        .collection('chats')
        .doc(serviceId)
        .set({'exist': true}).then((value) {
      FirebaseFirestore.instance
          .collection('users')
          .doc(uId)
          .collection('chats')
          .doc(serviceId)
          .collection('messages')
          .add(messageModel.toMap())
          .then((value) {
        emit(ChatBotSendMessageSuccessState());
      }).catchError((error) {
        print(error.toString());
        emit(SocialSendMessageErrorState());
      });
    });
  }

  List<MessageModel> messages = [];
  UserModel? reciver;

  Future<void> getMessages(String serviceId) async {
    FirebaseFirestore.instance
        .collection('users')
        .doc(uId)
        .collection('chats')
        .doc(serviceId)
        .collection('messages')
        .orderBy('dateTime', descending: true)
        .snapshots()
        .listen((event) {
      messages = [];
      event.docs.forEach((element) {
        messages.add(MessageModel.fromJson(element.data()));
      });
    });
  }

  Future<void> waitWhile(bool test) async {
    check() {
      if (test) {
        print('true');
        return;
      }
    }

    print('wait');
    check();
  }

  // bool isWrote = false;
  Autogenerated? responseModel;

  String? licenseNumber, licenseType, government;

  Future<void> dliSequence(String message, String serviceId) async {
    //   await waitWhile(state is ChatUserSendMessageSuccessState);
    // // while(state is ChatUserSendMessageSuccessState==false){}
    //     print('skiped');
    if (licenseNumber != null) {
      if (licenseType != null) {
        if(government != null){

        }
        else{
          DioHelper.getData(query: message).then((value) {
            responseModel = Autogenerated.fromJson(value.data);
            if (responseModel!.entities!.governmentGovernment?[0].name ==
                'government') {
              government =
                  responseModel!.entities!.governmentGovernment?[0].value;

            } else {
              botSendMessage(
                  'عذرا هذا ليست محافظة مسجلة لرخصة صالحة رجاء ادخل مرة اخري', serviceId);
            }
            emit(ChatSuccessResponseState());
          }).catchError((error) {
            emit(ChatErrorResponseState());
          });
        }
      } else {
        print(message);
        DioHelper.getData(query: message).then((value) {
          print(value.data);

          responseModel = Autogenerated.fromJson(value.data);
          print(responseModel);
          print(responseModel!.entities!.licenseTypeLicenseType![0].value);
          if (responseModel!.entities!.licenseTypeLicenseType?[0].name ==
              'licenseType') {
            licenseType =
                responseModel!.entities!.licenseTypeLicenseType?[0].value;
            botSendMessage('رجاء ادخل المحافظة التابع لها', serviceId);
          } else {
            botSendMessage(
                'عذرا هذا ليس نوع رخصة صالح رجاء ادخل مرة اخري', serviceId);
          }
          emit(ChatSuccessResponseState());
        }).catchError((error) {
          emit(ChatErrorResponseState());
        });
      }
    } else {
      DioHelper.getData(query: message).then((value) {
        responseModel = Autogenerated.fromJson(value.data);
        print(responseModel!.entities!.licenseNumberLicenseNumber?[0].name);
        print(responseModel!.entities!.licenseNumberLicenseNumber?[0].value);
        if (responseModel!.entities!.licenseNumberLicenseNumber?[0].name ==
                'licenseNumber' &&
            responseModel!
                    .entities!.licenseNumberLicenseNumber?[0].value!.length ==
                14) {
          licenseNumber =
              responseModel!.entities!.licenseNumberLicenseNumber?[0].value;
          botSendMessage('رجاء ادخل نوع الرخصة', serviceId);
        } else {
          botSendMessage(
              'عذرا هذا ليس رقم رخصة صالح رجاء ادخل مرة اخري', serviceId);
        }
        emit(ChatSuccessResponseState());
      }).catchError((error) {
        emit(ChatErrorResponseState());
      });
    }
  }
}
